//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMU.ImageTransmission.NewServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadImage", ReplyAction="http://tempuri.org/IService/UploadImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(UploadImageServer.FaultMessage), Action="http://tempuri.org/IService/UploadImageFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/UploadImageServer")]
        void UploadImage(int picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadImage", ReplyAction="http://tempuri.org/IService/UploadImageResponse")]
        System.Threading.Tasks.Task UploadImageAsync(int picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadImage2", ReplyAction="http://tempuri.org/IService/UploadImage2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(UploadImageServer.FaultMessage), Action="http://tempuri.org/IService/UploadImage2FaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/UploadImageServer")]
        void UploadImage2(string picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadImage2", ReplyAction="http://tempuri.org/IService/UploadImage2Response")]
        System.Threading.Tasks.Task UploadImage2Async(string picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadComplete", ReplyAction="http://tempuri.org/IService/UploadCompleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(UploadImageServer.FaultMessage), Action="http://tempuri.org/IService/UploadCompleteFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/UploadImageServer")]
        void UploadComplete(string id, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadComplete", ReplyAction="http://tempuri.org/IService/UploadCompleteResponse")]
        System.Threading.Tasks.Task UploadCompleteAsync(string id, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadPictrue", ReplyAction="http://tempuri.org/IService/UploadPictrueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(UploadImageServer.FaultMessage), Action="http://tempuri.org/IService/UploadPictrueFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/UploadImageServer")]
        string UploadPictrue(string parsIndex, int robot, int dataIndex, int dataLength, string id, byte[] imgData, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadPictrue", ReplyAction="http://tempuri.org/IService/UploadPictrueResponse")]
        System.Threading.Tasks.Task<string> UploadPictrueAsync(string parsIndex, int robot, int dataIndex, int dataLength, string id, byte[] imgData, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Upload3DData", ReplyAction="http://tempuri.org/IService/Upload3DDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(UploadImageServer.FaultMessage), Action="http://tempuri.org/IService/Upload3DDataFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/UploadImageServer")]
        void Upload3DData(string parsIndex, int robot, string data, string id, string robotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Upload3DData", ReplyAction="http://tempuri.org/IService/Upload3DDataResponse")]
        System.Threading.Tasks.Task Upload3DDataAsync(string parsIndex, int robot, string data, string id, string robotID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : EMU.ImageTransmission.NewServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<EMU.ImageTransmission.NewServiceReference.IService>, EMU.ImageTransmission.NewServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UploadImage(int picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID) {
            base.Channel.UploadImage(picIndex, dataIndex, dataLength, id, imgData, robotID);
        }
        
        public System.Threading.Tasks.Task UploadImageAsync(int picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID) {
            return base.Channel.UploadImageAsync(picIndex, dataIndex, dataLength, id, imgData, robotID);
        }
        
        public void UploadImage2(string picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID) {
            base.Channel.UploadImage2(picIndex, dataIndex, dataLength, id, imgData, robotID);
        }
        
        public System.Threading.Tasks.Task UploadImage2Async(string picIndex, int dataIndex, int dataLength, string id, byte[] imgData, string robotID) {
            return base.Channel.UploadImage2Async(picIndex, dataIndex, dataLength, id, imgData, robotID);
        }
        
        public void UploadComplete(string id, string robotID) {
            base.Channel.UploadComplete(id, robotID);
        }
        
        public System.Threading.Tasks.Task UploadCompleteAsync(string id, string robotID) {
            return base.Channel.UploadCompleteAsync(id, robotID);
        }
        
        public string UploadPictrue(string parsIndex, int robot, int dataIndex, int dataLength, string id, byte[] imgData, string robotID) {
            return base.Channel.UploadPictrue(parsIndex, robot, dataIndex, dataLength, id, imgData, robotID);
        }
        
        public System.Threading.Tasks.Task<string> UploadPictrueAsync(string parsIndex, int robot, int dataIndex, int dataLength, string id, byte[] imgData, string robotID) {
            return base.Channel.UploadPictrueAsync(parsIndex, robot, dataIndex, dataLength, id, imgData, robotID);
        }
        
        public void Upload3DData(string parsIndex, int robot, string data, string id, string robotID) {
            base.Channel.Upload3DData(parsIndex, robot, data, id, robotID);
        }
        
        public System.Threading.Tasks.Task Upload3DDataAsync(string parsIndex, int robot, string data, string id, string robotID) {
            return base.Channel.Upload3DDataAsync(parsIndex, robot, data, id, robotID);
        }
    }
}
